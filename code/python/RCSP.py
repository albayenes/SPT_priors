# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RCSP', [dirname(__file__)])
        except ImportError:
            import _RCSP
            return _RCSP
        if fp is not None:
            try:
                _mod = imp.load_module('_RCSP', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _RCSP = swig_import_helper()
    del swig_import_helper
else:
    import _RCSP
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RCSP.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _RCSP.SwigPyIterator_value(self)
    def incr(self, n = 1): return _RCSP.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _RCSP.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _RCSP.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _RCSP.SwigPyIterator_equal(self, *args)
    def copy(self): return _RCSP.SwigPyIterator_copy(self)
    def next(self): return _RCSP.SwigPyIterator_next(self)
    def __next__(self): return _RCSP.SwigPyIterator___next__(self)
    def previous(self): return _RCSP.SwigPyIterator_previous(self)
    def advance(self, *args): return _RCSP.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _RCSP.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _RCSP.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _RCSP.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _RCSP.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _RCSP.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _RCSP.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _RCSP.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IdVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IdVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _RCSP.IdVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _RCSP.IdVector___nonzero__(self)
    def __bool__(self): return _RCSP.IdVector___bool__(self)
    def __len__(self): return _RCSP.IdVector___len__(self)
    def pop(self): return _RCSP.IdVector_pop(self)
    def __getslice__(self, *args): return _RCSP.IdVector___getslice__(self, *args)
    def __setslice__(self, *args): return _RCSP.IdVector___setslice__(self, *args)
    def __delslice__(self, *args): return _RCSP.IdVector___delslice__(self, *args)
    def __delitem__(self, *args): return _RCSP.IdVector___delitem__(self, *args)
    def __getitem__(self, *args): return _RCSP.IdVector___getitem__(self, *args)
    def __setitem__(self, *args): return _RCSP.IdVector___setitem__(self, *args)
    def append(self, *args): return _RCSP.IdVector_append(self, *args)
    def empty(self): return _RCSP.IdVector_empty(self)
    def size(self): return _RCSP.IdVector_size(self)
    def clear(self): return _RCSP.IdVector_clear(self)
    def swap(self, *args): return _RCSP.IdVector_swap(self, *args)
    def get_allocator(self): return _RCSP.IdVector_get_allocator(self)
    def begin(self): return _RCSP.IdVector_begin(self)
    def end(self): return _RCSP.IdVector_end(self)
    def rbegin(self): return _RCSP.IdVector_rbegin(self)
    def rend(self): return _RCSP.IdVector_rend(self)
    def pop_back(self): return _RCSP.IdVector_pop_back(self)
    def erase(self, *args): return _RCSP.IdVector_erase(self, *args)
    def __init__(self, *args): 
        this = _RCSP.new_IdVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _RCSP.IdVector_push_back(self, *args)
    def front(self): return _RCSP.IdVector_front(self)
    def back(self): return _RCSP.IdVector_back(self)
    def assign(self, *args): return _RCSP.IdVector_assign(self, *args)
    def resize(self, *args): return _RCSP.IdVector_resize(self, *args)
    def insert(self, *args): return _RCSP.IdVector_insert(self, *args)
    def reserve(self, *args): return _RCSP.IdVector_reserve(self, *args)
    def capacity(self): return _RCSP.IdVector_capacity(self)
    __swig_destroy__ = _RCSP.delete_IdVector
    __del__ = lambda self : None;
IdVector_swigregister = _RCSP.IdVector_swigregister
IdVector_swigregister(IdVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _RCSP.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _RCSP.DoubleVector___nonzero__(self)
    def __bool__(self): return _RCSP.DoubleVector___bool__(self)
    def __len__(self): return _RCSP.DoubleVector___len__(self)
    def pop(self): return _RCSP.DoubleVector_pop(self)
    def __getslice__(self, *args): return _RCSP.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _RCSP.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _RCSP.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _RCSP.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _RCSP.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _RCSP.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _RCSP.DoubleVector_append(self, *args)
    def empty(self): return _RCSP.DoubleVector_empty(self)
    def size(self): return _RCSP.DoubleVector_size(self)
    def clear(self): return _RCSP.DoubleVector_clear(self)
    def swap(self, *args): return _RCSP.DoubleVector_swap(self, *args)
    def get_allocator(self): return _RCSP.DoubleVector_get_allocator(self)
    def begin(self): return _RCSP.DoubleVector_begin(self)
    def end(self): return _RCSP.DoubleVector_end(self)
    def rbegin(self): return _RCSP.DoubleVector_rbegin(self)
    def rend(self): return _RCSP.DoubleVector_rend(self)
    def pop_back(self): return _RCSP.DoubleVector_pop_back(self)
    def erase(self, *args): return _RCSP.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _RCSP.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _RCSP.DoubleVector_push_back(self, *args)
    def front(self): return _RCSP.DoubleVector_front(self)
    def back(self): return _RCSP.DoubleVector_back(self)
    def assign(self, *args): return _RCSP.DoubleVector_assign(self, *args)
    def resize(self, *args): return _RCSP.DoubleVector_resize(self, *args)
    def insert(self, *args): return _RCSP.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _RCSP.DoubleVector_reserve(self, *args)
    def capacity(self): return _RCSP.DoubleVector_capacity(self)
    __swig_destroy__ = _RCSP.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _RCSP.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _RCSP.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _RCSP.StringVector___nonzero__(self)
    def __bool__(self): return _RCSP.StringVector___bool__(self)
    def __len__(self): return _RCSP.StringVector___len__(self)
    def pop(self): return _RCSP.StringVector_pop(self)
    def __getslice__(self, *args): return _RCSP.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _RCSP.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _RCSP.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _RCSP.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _RCSP.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _RCSP.StringVector___setitem__(self, *args)
    def append(self, *args): return _RCSP.StringVector_append(self, *args)
    def empty(self): return _RCSP.StringVector_empty(self)
    def size(self): return _RCSP.StringVector_size(self)
    def clear(self): return _RCSP.StringVector_clear(self)
    def swap(self, *args): return _RCSP.StringVector_swap(self, *args)
    def get_allocator(self): return _RCSP.StringVector_get_allocator(self)
    def begin(self): return _RCSP.StringVector_begin(self)
    def end(self): return _RCSP.StringVector_end(self)
    def rbegin(self): return _RCSP.StringVector_rbegin(self)
    def rend(self): return _RCSP.StringVector_rend(self)
    def pop_back(self): return _RCSP.StringVector_pop_back(self)
    def erase(self, *args): return _RCSP.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _RCSP.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _RCSP.StringVector_push_back(self, *args)
    def front(self): return _RCSP.StringVector_front(self)
    def back(self): return _RCSP.StringVector_back(self)
    def assign(self, *args): return _RCSP.StringVector_assign(self, *args)
    def resize(self, *args): return _RCSP.StringVector_resize(self, *args)
    def insert(self, *args): return _RCSP.StringVector_insert(self, *args)
    def reserve(self, *args): return _RCSP.StringVector_reserve(self, *args)
    def capacity(self): return _RCSP.StringVector_capacity(self)
    __swig_destroy__ = _RCSP.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _RCSP.StringVector_swigregister
StringVector_swigregister(StringVector)

class Property(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Property, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Property, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _RCSP.delete_Property
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _RCSP.new_Property(*args)
        try: self.this.append(this)
        except: self.this = this
    def __len__(self): return _RCSP.Property___len__(self)
    def norm(self): return _RCSP.Property_norm(self)
    def __isub__(self, *args): return _RCSP.Property___isub__(self, *args)
    def __sub__(self, *args): return _RCSP.Property___sub__(self, *args)
    def __idiv__(self, *args): return _RCSP.Property___idiv__(self, *args)
    def __div__(self, *args): return _RCSP.Property___div__(self, *args)
    def __eq__(self, *args): return _RCSP.Property___eq__(self, *args)
    def __ne__(self, *args): return _RCSP.Property___ne__(self, *args)
    def __lt__(self, *args): return _RCSP.Property___lt__(self, *args)
    def __gt__(self, *args): return _RCSP.Property___gt__(self, *args)
    def dot(self, *args): return _RCSP.Property_dot(self, *args)
    def __getitem__(self, *args): return _RCSP.Property___getitem__(self, *args)
    def __setitem__(self, *args): return _RCSP.Property___setitem__(self, *args)
Property_swigregister = _RCSP.Property_swigregister
Property_swigregister(Property)

class StringPropertyMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringPropertyMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringPropertyMap, name)
    __repr__ = _swig_repr
    def iterator(self): return _RCSP.StringPropertyMap_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _RCSP.StringPropertyMap___nonzero__(self)
    def __bool__(self): return _RCSP.StringPropertyMap___bool__(self)
    def __len__(self): return _RCSP.StringPropertyMap___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _RCSP.StringPropertyMap___getitem__(self, *args)
    def __delitem__(self, *args): return _RCSP.StringPropertyMap___delitem__(self, *args)
    def has_key(self, *args): return _RCSP.StringPropertyMap_has_key(self, *args)
    def keys(self): return _RCSP.StringPropertyMap_keys(self)
    def values(self): return _RCSP.StringPropertyMap_values(self)
    def items(self): return _RCSP.StringPropertyMap_items(self)
    def __contains__(self, *args): return _RCSP.StringPropertyMap___contains__(self, *args)
    def key_iterator(self): return _RCSP.StringPropertyMap_key_iterator(self)
    def value_iterator(self): return _RCSP.StringPropertyMap_value_iterator(self)
    def __setitem__(self, *args): return _RCSP.StringPropertyMap___setitem__(self, *args)
    def asdict(self): return _RCSP.StringPropertyMap_asdict(self)
    def __init__(self, *args): 
        this = _RCSP.new_StringPropertyMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _RCSP.StringPropertyMap_empty(self)
    def size(self): return _RCSP.StringPropertyMap_size(self)
    def clear(self): return _RCSP.StringPropertyMap_clear(self)
    def swap(self, *args): return _RCSP.StringPropertyMap_swap(self, *args)
    def get_allocator(self): return _RCSP.StringPropertyMap_get_allocator(self)
    def begin(self): return _RCSP.StringPropertyMap_begin(self)
    def end(self): return _RCSP.StringPropertyMap_end(self)
    def rbegin(self): return _RCSP.StringPropertyMap_rbegin(self)
    def rend(self): return _RCSP.StringPropertyMap_rend(self)
    def count(self, *args): return _RCSP.StringPropertyMap_count(self, *args)
    def erase(self, *args): return _RCSP.StringPropertyMap_erase(self, *args)
    def find(self, *args): return _RCSP.StringPropertyMap_find(self, *args)
    def lower_bound(self, *args): return _RCSP.StringPropertyMap_lower_bound(self, *args)
    def upper_bound(self, *args): return _RCSP.StringPropertyMap_upper_bound(self, *args)
    __swig_destroy__ = _RCSP.delete_StringPropertyMap
    __del__ = lambda self : None;
StringPropertyMap_swigregister = _RCSP.StringPropertyMap_swigregister
StringPropertyMap_swigregister(StringPropertyMap)

class Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _RCSP.delete_Node
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _RCSP.new_Node(*args)
        try: self.this.append(this)
        except: self.this = this
    def id(self): return _RCSP.Node_id(self)
    def __eq__(self, *args): return _RCSP.Node___eq__(self, *args)
    def __ne__(self, *args): return _RCSP.Node___ne__(self, *args)
    __swig_setmethods__["properties"] = _RCSP.Node_properties_set
    __swig_getmethods__["properties"] = _RCSP.Node_properties_get
    if _newclass:properties = _swig_property(_RCSP.Node_properties_get, _RCSP.Node_properties_set)
Node_swigregister = _RCSP.Node_swigregister
Node_swigregister(Node)

class NodeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _RCSP.NodeVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _RCSP.NodeVector___nonzero__(self)
    def __bool__(self): return _RCSP.NodeVector___bool__(self)
    def __len__(self): return _RCSP.NodeVector___len__(self)
    def pop(self): return _RCSP.NodeVector_pop(self)
    def __getslice__(self, *args): return _RCSP.NodeVector___getslice__(self, *args)
    def __setslice__(self, *args): return _RCSP.NodeVector___setslice__(self, *args)
    def __delslice__(self, *args): return _RCSP.NodeVector___delslice__(self, *args)
    def __delitem__(self, *args): return _RCSP.NodeVector___delitem__(self, *args)
    def __getitem__(self, *args): return _RCSP.NodeVector___getitem__(self, *args)
    def __setitem__(self, *args): return _RCSP.NodeVector___setitem__(self, *args)
    def append(self, *args): return _RCSP.NodeVector_append(self, *args)
    def empty(self): return _RCSP.NodeVector_empty(self)
    def size(self): return _RCSP.NodeVector_size(self)
    def clear(self): return _RCSP.NodeVector_clear(self)
    def swap(self, *args): return _RCSP.NodeVector_swap(self, *args)
    def get_allocator(self): return _RCSP.NodeVector_get_allocator(self)
    def begin(self): return _RCSP.NodeVector_begin(self)
    def end(self): return _RCSP.NodeVector_end(self)
    def rbegin(self): return _RCSP.NodeVector_rbegin(self)
    def rend(self): return _RCSP.NodeVector_rend(self)
    def pop_back(self): return _RCSP.NodeVector_pop_back(self)
    def erase(self, *args): return _RCSP.NodeVector_erase(self, *args)
    def __init__(self, *args): 
        this = _RCSP.new_NodeVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _RCSP.NodeVector_push_back(self, *args)
    def front(self): return _RCSP.NodeVector_front(self)
    def back(self): return _RCSP.NodeVector_back(self)
    def assign(self, *args): return _RCSP.NodeVector_assign(self, *args)
    def resize(self, *args): return _RCSP.NodeVector_resize(self, *args)
    def insert(self, *args): return _RCSP.NodeVector_insert(self, *args)
    def reserve(self, *args): return _RCSP.NodeVector_reserve(self, *args)
    def capacity(self): return _RCSP.NodeVector_capacity(self)
    __swig_destroy__ = _RCSP.delete_NodeVector
    __del__ = lambda self : None;
NodeVector_swigregister = _RCSP.NodeVector_swigregister
NodeVector_swigregister(NodeVector)

class Edge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Edge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Edge, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _RCSP.new_Edge(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _RCSP.Edge___eq__(self, *args)
    def __ne__(self, *args): return _RCSP.Edge___ne__(self, *args)
    __swig_setmethods__["node"] = _RCSP.Edge_node_set
    __swig_getmethods__["node"] = _RCSP.Edge_node_get
    if _newclass:node = _swig_property(_RCSP.Edge_node_get, _RCSP.Edge_node_set)
    __swig_setmethods__["weight"] = _RCSP.Edge_weight_set
    __swig_getmethods__["weight"] = _RCSP.Edge_weight_get
    if _newclass:weight = _swig_property(_RCSP.Edge_weight_get, _RCSP.Edge_weight_set)
    __swig_destroy__ = _RCSP.delete_Edge
    __del__ = lambda self : None;
Edge_swigregister = _RCSP.Edge_swigregister
Edge_swigregister(Edge)

class EdgeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EdgeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EdgeVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _RCSP.EdgeVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _RCSP.EdgeVector___nonzero__(self)
    def __bool__(self): return _RCSP.EdgeVector___bool__(self)
    def __len__(self): return _RCSP.EdgeVector___len__(self)
    def pop(self): return _RCSP.EdgeVector_pop(self)
    def __getslice__(self, *args): return _RCSP.EdgeVector___getslice__(self, *args)
    def __setslice__(self, *args): return _RCSP.EdgeVector___setslice__(self, *args)
    def __delslice__(self, *args): return _RCSP.EdgeVector___delslice__(self, *args)
    def __delitem__(self, *args): return _RCSP.EdgeVector___delitem__(self, *args)
    def __getitem__(self, *args): return _RCSP.EdgeVector___getitem__(self, *args)
    def __setitem__(self, *args): return _RCSP.EdgeVector___setitem__(self, *args)
    def append(self, *args): return _RCSP.EdgeVector_append(self, *args)
    def empty(self): return _RCSP.EdgeVector_empty(self)
    def size(self): return _RCSP.EdgeVector_size(self)
    def clear(self): return _RCSP.EdgeVector_clear(self)
    def swap(self, *args): return _RCSP.EdgeVector_swap(self, *args)
    def get_allocator(self): return _RCSP.EdgeVector_get_allocator(self)
    def begin(self): return _RCSP.EdgeVector_begin(self)
    def end(self): return _RCSP.EdgeVector_end(self)
    def rbegin(self): return _RCSP.EdgeVector_rbegin(self)
    def rend(self): return _RCSP.EdgeVector_rend(self)
    def pop_back(self): return _RCSP.EdgeVector_pop_back(self)
    def erase(self, *args): return _RCSP.EdgeVector_erase(self, *args)
    def __init__(self, *args): 
        this = _RCSP.new_EdgeVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _RCSP.EdgeVector_push_back(self, *args)
    def front(self): return _RCSP.EdgeVector_front(self)
    def back(self): return _RCSP.EdgeVector_back(self)
    def assign(self, *args): return _RCSP.EdgeVector_assign(self, *args)
    def resize(self, *args): return _RCSP.EdgeVector_resize(self, *args)
    def insert(self, *args): return _RCSP.EdgeVector_insert(self, *args)
    def reserve(self, *args): return _RCSP.EdgeVector_reserve(self, *args)
    def capacity(self): return _RCSP.EdgeVector_capacity(self)
    __swig_destroy__ = _RCSP.delete_EdgeVector
    __del__ = lambda self : None;
EdgeVector_swigregister = _RCSP.EdgeVector_swigregister
EdgeVector_swigregister(EdgeVector)

class EdgeListVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EdgeListVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EdgeListVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _RCSP.EdgeListVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _RCSP.EdgeListVector___nonzero__(self)
    def __bool__(self): return _RCSP.EdgeListVector___bool__(self)
    def __len__(self): return _RCSP.EdgeListVector___len__(self)
    def pop(self): return _RCSP.EdgeListVector_pop(self)
    def __getslice__(self, *args): return _RCSP.EdgeListVector___getslice__(self, *args)
    def __setslice__(self, *args): return _RCSP.EdgeListVector___setslice__(self, *args)
    def __delslice__(self, *args): return _RCSP.EdgeListVector___delslice__(self, *args)
    def __delitem__(self, *args): return _RCSP.EdgeListVector___delitem__(self, *args)
    def __getitem__(self, *args): return _RCSP.EdgeListVector___getitem__(self, *args)
    def __setitem__(self, *args): return _RCSP.EdgeListVector___setitem__(self, *args)
    def append(self, *args): return _RCSP.EdgeListVector_append(self, *args)
    def empty(self): return _RCSP.EdgeListVector_empty(self)
    def size(self): return _RCSP.EdgeListVector_size(self)
    def clear(self): return _RCSP.EdgeListVector_clear(self)
    def swap(self, *args): return _RCSP.EdgeListVector_swap(self, *args)
    def get_allocator(self): return _RCSP.EdgeListVector_get_allocator(self)
    def begin(self): return _RCSP.EdgeListVector_begin(self)
    def end(self): return _RCSP.EdgeListVector_end(self)
    def rbegin(self): return _RCSP.EdgeListVector_rbegin(self)
    def rend(self): return _RCSP.EdgeListVector_rend(self)
    def pop_back(self): return _RCSP.EdgeListVector_pop_back(self)
    def erase(self, *args): return _RCSP.EdgeListVector_erase(self, *args)
    def __init__(self, *args): 
        this = _RCSP.new_EdgeListVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _RCSP.EdgeListVector_push_back(self, *args)
    def front(self): return _RCSP.EdgeListVector_front(self)
    def back(self): return _RCSP.EdgeListVector_back(self)
    def assign(self, *args): return _RCSP.EdgeListVector_assign(self, *args)
    def resize(self, *args): return _RCSP.EdgeListVector_resize(self, *args)
    def insert(self, *args): return _RCSP.EdgeListVector_insert(self, *args)
    def reserve(self, *args): return _RCSP.EdgeListVector_reserve(self, *args)
    def capacity(self): return _RCSP.EdgeListVector_capacity(self)
    __swig_destroy__ = _RCSP.delete_EdgeListVector
    __del__ = lambda self : None;
EdgeListVector_swigregister = _RCSP.EdgeListVector_swigregister
EdgeListVector_swigregister(EdgeListVector)

class LongLongVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongLongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongLongVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _RCSP.LongLongVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _RCSP.LongLongVector___nonzero__(self)
    def __bool__(self): return _RCSP.LongLongVector___bool__(self)
    def __len__(self): return _RCSP.LongLongVector___len__(self)
    def pop(self): return _RCSP.LongLongVector_pop(self)
    def __getslice__(self, *args): return _RCSP.LongLongVector___getslice__(self, *args)
    def __setslice__(self, *args): return _RCSP.LongLongVector___setslice__(self, *args)
    def __delslice__(self, *args): return _RCSP.LongLongVector___delslice__(self, *args)
    def __delitem__(self, *args): return _RCSP.LongLongVector___delitem__(self, *args)
    def __getitem__(self, *args): return _RCSP.LongLongVector___getitem__(self, *args)
    def __setitem__(self, *args): return _RCSP.LongLongVector___setitem__(self, *args)
    def append(self, *args): return _RCSP.LongLongVector_append(self, *args)
    def empty(self): return _RCSP.LongLongVector_empty(self)
    def size(self): return _RCSP.LongLongVector_size(self)
    def clear(self): return _RCSP.LongLongVector_clear(self)
    def swap(self, *args): return _RCSP.LongLongVector_swap(self, *args)
    def get_allocator(self): return _RCSP.LongLongVector_get_allocator(self)
    def begin(self): return _RCSP.LongLongVector_begin(self)
    def end(self): return _RCSP.LongLongVector_end(self)
    def rbegin(self): return _RCSP.LongLongVector_rbegin(self)
    def rend(self): return _RCSP.LongLongVector_rend(self)
    def pop_back(self): return _RCSP.LongLongVector_pop_back(self)
    def erase(self, *args): return _RCSP.LongLongVector_erase(self, *args)
    def __init__(self, *args): 
        this = _RCSP.new_LongLongVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _RCSP.LongLongVector_push_back(self, *args)
    def front(self): return _RCSP.LongLongVector_front(self)
    def back(self): return _RCSP.LongLongVector_back(self)
    def assign(self, *args): return _RCSP.LongLongVector_assign(self, *args)
    def resize(self, *args): return _RCSP.LongLongVector_resize(self, *args)
    def insert(self, *args): return _RCSP.LongLongVector_insert(self, *args)
    def reserve(self, *args): return _RCSP.LongLongVector_reserve(self, *args)
    def capacity(self): return _RCSP.LongLongVector_capacity(self)
    __swig_destroy__ = _RCSP.delete_LongLongVector
    __del__ = lambda self : None;
LongLongVector_swigregister = _RCSP.LongLongVector_swigregister
LongLongVector_swigregister(LongLongVector)

class GraphVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GraphVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _RCSP.GraphVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _RCSP.GraphVector___nonzero__(self)
    def __bool__(self): return _RCSP.GraphVector___bool__(self)
    def __len__(self): return _RCSP.GraphVector___len__(self)
    def pop(self): return _RCSP.GraphVector_pop(self)
    def __getslice__(self, *args): return _RCSP.GraphVector___getslice__(self, *args)
    def __setslice__(self, *args): return _RCSP.GraphVector___setslice__(self, *args)
    def __delslice__(self, *args): return _RCSP.GraphVector___delslice__(self, *args)
    def __delitem__(self, *args): return _RCSP.GraphVector___delitem__(self, *args)
    def __getitem__(self, *args): return _RCSP.GraphVector___getitem__(self, *args)
    def __setitem__(self, *args): return _RCSP.GraphVector___setitem__(self, *args)
    def append(self, *args): return _RCSP.GraphVector_append(self, *args)
    def empty(self): return _RCSP.GraphVector_empty(self)
    def size(self): return _RCSP.GraphVector_size(self)
    def clear(self): return _RCSP.GraphVector_clear(self)
    def swap(self, *args): return _RCSP.GraphVector_swap(self, *args)
    def get_allocator(self): return _RCSP.GraphVector_get_allocator(self)
    def begin(self): return _RCSP.GraphVector_begin(self)
    def end(self): return _RCSP.GraphVector_end(self)
    def rbegin(self): return _RCSP.GraphVector_rbegin(self)
    def rend(self): return _RCSP.GraphVector_rend(self)
    def pop_back(self): return _RCSP.GraphVector_pop_back(self)
    def erase(self, *args): return _RCSP.GraphVector_erase(self, *args)
    def __init__(self, *args): 
        this = _RCSP.new_GraphVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _RCSP.GraphVector_push_back(self, *args)
    def front(self): return _RCSP.GraphVector_front(self)
    def back(self): return _RCSP.GraphVector_back(self)
    def assign(self, *args): return _RCSP.GraphVector_assign(self, *args)
    def resize(self, *args): return _RCSP.GraphVector_resize(self, *args)
    def insert(self, *args): return _RCSP.GraphVector_insert(self, *args)
    def reserve(self, *args): return _RCSP.GraphVector_reserve(self, *args)
    def capacity(self): return _RCSP.GraphVector_capacity(self)
    __swig_destroy__ = _RCSP.delete_GraphVector
    __del__ = lambda self : None;
GraphVector_swigregister = _RCSP.GraphVector_swigregister
GraphVector_swigregister(GraphVector)

class Graph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Graph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Graph, name)
    __repr__ = _swig_repr
    __swig_getmethods__["load_binary"] = lambda x: _RCSP.Graph_load_binary
    if _newclass:load_binary = staticmethod(_RCSP.Graph_load_binary)
    def __init__(self, *args): 
        this = _RCSP.new_Graph(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RCSP.delete_Graph
    __del__ = lambda self : None;
    def node(self, *args): return _RCSP.Graph_node(self, *args)
    def edges(self, *args): return _RCSP.Graph_edges(self, *args)
    def edge(self, *args): return _RCSP.Graph_edge(self, *args)
    def no_of_nodes(self): return _RCSP.Graph_no_of_nodes(self)
    def save_binary(self, *args): return _RCSP.Graph_save_binary(self, *args)
    def calculate_node_importance(self, *args): return _RCSP.Graph_calculate_node_importance(self, *args)
    def as_matrix(self, *args): return _RCSP.Graph_as_matrix(self, *args)
Graph_swigregister = _RCSP.Graph_swigregister
Graph_swigregister(Graph)

def Graph_load_binary(*args):
  return _RCSP.Graph_load_binary(*args)
Graph_load_binary = _RCSP.Graph_load_binary

class DijkstraPath(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DijkstraPath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DijkstraPath, name)
    __repr__ = _swig_repr
    def iterator(self): return _RCSP.DijkstraPath_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _RCSP.DijkstraPath___nonzero__(self)
    def __bool__(self): return _RCSP.DijkstraPath___bool__(self)
    def __len__(self): return _RCSP.DijkstraPath___len__(self)
    def pop(self): return _RCSP.DijkstraPath_pop(self)
    def __getslice__(self, *args): return _RCSP.DijkstraPath___getslice__(self, *args)
    def __setslice__(self, *args): return _RCSP.DijkstraPath___setslice__(self, *args)
    def __delslice__(self, *args): return _RCSP.DijkstraPath___delslice__(self, *args)
    def __delitem__(self, *args): return _RCSP.DijkstraPath___delitem__(self, *args)
    def __getitem__(self, *args): return _RCSP.DijkstraPath___getitem__(self, *args)
    def __setitem__(self, *args): return _RCSP.DijkstraPath___setitem__(self, *args)
    def append(self, *args): return _RCSP.DijkstraPath_append(self, *args)
    def empty(self): return _RCSP.DijkstraPath_empty(self)
    def size(self): return _RCSP.DijkstraPath_size(self)
    def clear(self): return _RCSP.DijkstraPath_clear(self)
    def swap(self, *args): return _RCSP.DijkstraPath_swap(self, *args)
    def get_allocator(self): return _RCSP.DijkstraPath_get_allocator(self)
    def begin(self): return _RCSP.DijkstraPath_begin(self)
    def end(self): return _RCSP.DijkstraPath_end(self)
    def rbegin(self): return _RCSP.DijkstraPath_rbegin(self)
    def rend(self): return _RCSP.DijkstraPath_rend(self)
    def pop_back(self): return _RCSP.DijkstraPath_pop_back(self)
    def erase(self, *args): return _RCSP.DijkstraPath_erase(self, *args)
    def __init__(self, *args): 
        this = _RCSP.new_DijkstraPath(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _RCSP.DijkstraPath_push_back(self, *args)
    def front(self): return _RCSP.DijkstraPath_front(self)
    def back(self): return _RCSP.DijkstraPath_back(self)
    def assign(self, *args): return _RCSP.DijkstraPath_assign(self, *args)
    def resize(self, *args): return _RCSP.DijkstraPath_resize(self, *args)
    def insert(self, *args): return _RCSP.DijkstraPath_insert(self, *args)
    def reserve(self, *args): return _RCSP.DijkstraPath_reserve(self, *args)
    def capacity(self): return _RCSP.DijkstraPath_capacity(self)
    __swig_destroy__ = _RCSP.delete_DijkstraPath
    __del__ = lambda self : None;
DijkstraPath_swigregister = _RCSP.DijkstraPath_swigregister
DijkstraPath_swigregister(DijkstraPath)

class ROItoROI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ROItoROI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ROItoROI, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _RCSP.new_ROItoROI()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RCSP.delete_ROItoROI
    __del__ = lambda self : None;
    def __call__(self, *args): return _RCSP.ROItoROI___call__(self, *args)
    def get_path(self, *args): return _RCSP.ROItoROI_get_path(self, *args)
    def set_path(self, *args): return _RCSP.ROItoROI_set_path(self, *args)
    def no_of_sources(self): return _RCSP.ROItoROI_no_of_sources(self)
    def no_of_targets(self, *args): return _RCSP.ROItoROI_no_of_targets(self, *args)
ROItoROI_swigregister = _RCSP.ROItoROI_swigregister
ROItoROI_swigregister(ROItoROI)

class ULongVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ULongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ULongVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _RCSP.ULongVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _RCSP.ULongVector___nonzero__(self)
    def __bool__(self): return _RCSP.ULongVector___bool__(self)
    def __len__(self): return _RCSP.ULongVector___len__(self)
    def pop(self): return _RCSP.ULongVector_pop(self)
    def __getslice__(self, *args): return _RCSP.ULongVector___getslice__(self, *args)
    def __setslice__(self, *args): return _RCSP.ULongVector___setslice__(self, *args)
    def __delslice__(self, *args): return _RCSP.ULongVector___delslice__(self, *args)
    def __delitem__(self, *args): return _RCSP.ULongVector___delitem__(self, *args)
    def __getitem__(self, *args): return _RCSP.ULongVector___getitem__(self, *args)
    def __setitem__(self, *args): return _RCSP.ULongVector___setitem__(self, *args)
    def append(self, *args): return _RCSP.ULongVector_append(self, *args)
    def empty(self): return _RCSP.ULongVector_empty(self)
    def size(self): return _RCSP.ULongVector_size(self)
    def clear(self): return _RCSP.ULongVector_clear(self)
    def swap(self, *args): return _RCSP.ULongVector_swap(self, *args)
    def get_allocator(self): return _RCSP.ULongVector_get_allocator(self)
    def begin(self): return _RCSP.ULongVector_begin(self)
    def end(self): return _RCSP.ULongVector_end(self)
    def rbegin(self): return _RCSP.ULongVector_rbegin(self)
    def rend(self): return _RCSP.ULongVector_rend(self)
    def pop_back(self): return _RCSP.ULongVector_pop_back(self)
    def erase(self, *args): return _RCSP.ULongVector_erase(self, *args)
    def __init__(self, *args): 
        this = _RCSP.new_ULongVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _RCSP.ULongVector_push_back(self, *args)
    def front(self): return _RCSP.ULongVector_front(self)
    def back(self): return _RCSP.ULongVector_back(self)
    def assign(self, *args): return _RCSP.ULongVector_assign(self, *args)
    def resize(self, *args): return _RCSP.ULongVector_resize(self, *args)
    def insert(self, *args): return _RCSP.ULongVector_insert(self, *args)
    def reserve(self, *args): return _RCSP.ULongVector_reserve(self, *args)
    def capacity(self): return _RCSP.ULongVector_capacity(self)
    __swig_destroy__ = _RCSP.delete_ULongVector
    __del__ = lambda self : None;
ULongVector_swigregister = _RCSP.ULongVector_swigregister
ULongVector_swigregister(ULongVector)

class IntListMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntListMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntListMap, name)
    __repr__ = _swig_repr
    def iterator(self): return _RCSP.IntListMap_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _RCSP.IntListMap___nonzero__(self)
    def __bool__(self): return _RCSP.IntListMap___bool__(self)
    def __len__(self): return _RCSP.IntListMap___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _RCSP.IntListMap___getitem__(self, *args)
    def __delitem__(self, *args): return _RCSP.IntListMap___delitem__(self, *args)
    def has_key(self, *args): return _RCSP.IntListMap_has_key(self, *args)
    def keys(self): return _RCSP.IntListMap_keys(self)
    def values(self): return _RCSP.IntListMap_values(self)
    def items(self): return _RCSP.IntListMap_items(self)
    def __contains__(self, *args): return _RCSP.IntListMap___contains__(self, *args)
    def key_iterator(self): return _RCSP.IntListMap_key_iterator(self)
    def value_iterator(self): return _RCSP.IntListMap_value_iterator(self)
    def __setitem__(self, *args): return _RCSP.IntListMap___setitem__(self, *args)
    def asdict(self): return _RCSP.IntListMap_asdict(self)
    def __init__(self, *args): 
        this = _RCSP.new_IntListMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _RCSP.IntListMap_empty(self)
    def size(self): return _RCSP.IntListMap_size(self)
    def clear(self): return _RCSP.IntListMap_clear(self)
    def swap(self, *args): return _RCSP.IntListMap_swap(self, *args)
    def get_allocator(self): return _RCSP.IntListMap_get_allocator(self)
    def begin(self): return _RCSP.IntListMap_begin(self)
    def end(self): return _RCSP.IntListMap_end(self)
    def rbegin(self): return _RCSP.IntListMap_rbegin(self)
    def rend(self): return _RCSP.IntListMap_rend(self)
    def count(self, *args): return _RCSP.IntListMap_count(self, *args)
    def erase(self, *args): return _RCSP.IntListMap_erase(self, *args)
    def find(self, *args): return _RCSP.IntListMap_find(self, *args)
    def lower_bound(self, *args): return _RCSP.IntListMap_lower_bound(self, *args)
    def upper_bound(self, *args): return _RCSP.IntListMap_upper_bound(self, *args)
    __swig_destroy__ = _RCSP.delete_IntListMap
    __del__ = lambda self : None;
IntListMap_swigregister = _RCSP.IntListMap_swigregister
IntListMap_swigregister(IntListMap)

class ShortestPathNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortestPathNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShortestPathNode, name)
    __repr__ = _swig_repr
    def __init__(self, weight = 0, length = 0, id = 0, predecessor = 0, is_target = False): 
        this = _RCSP.new_ShortestPathNode(weight, length, id, predecessor, is_target)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["weight"] = _RCSP.ShortestPathNode_weight_set
    __swig_getmethods__["weight"] = _RCSP.ShortestPathNode_weight_get
    if _newclass:weight = _swig_property(_RCSP.ShortestPathNode_weight_get, _RCSP.ShortestPathNode_weight_set)
    __swig_setmethods__["length"] = _RCSP.ShortestPathNode_length_set
    __swig_getmethods__["length"] = _RCSP.ShortestPathNode_length_get
    if _newclass:length = _swig_property(_RCSP.ShortestPathNode_length_get, _RCSP.ShortestPathNode_length_set)
    __swig_setmethods__["id"] = _RCSP.ShortestPathNode_id_set
    __swig_getmethods__["id"] = _RCSP.ShortestPathNode_id_get
    if _newclass:id = _swig_property(_RCSP.ShortestPathNode_id_get, _RCSP.ShortestPathNode_id_set)
    __swig_setmethods__["predecessor"] = _RCSP.ShortestPathNode_predecessor_set
    __swig_getmethods__["predecessor"] = _RCSP.ShortestPathNode_predecessor_get
    if _newclass:predecessor = _swig_property(_RCSP.ShortestPathNode_predecessor_get, _RCSP.ShortestPathNode_predecessor_set)
    __swig_setmethods__["is_target"] = _RCSP.ShortestPathNode_is_target_set
    __swig_getmethods__["is_target"] = _RCSP.ShortestPathNode_is_target_get
    if _newclass:is_target = _swig_property(_RCSP.ShortestPathNode_is_target_get, _RCSP.ShortestPathNode_is_target_set)
    __swig_destroy__ = _RCSP.delete_ShortestPathNode
    __del__ = lambda self : None;
ShortestPathNode_swigregister = _RCSP.ShortestPathNode_swigregister
ShortestPathNode_swigregister(ShortestPathNode)

class CompareNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompareNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompareNode, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _RCSP.CompareNode___call__(self, *args)
    def __init__(self): 
        this = _RCSP.new_CompareNode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RCSP.delete_CompareNode
    __del__ = lambda self : None;
CompareNode_swigregister = _RCSP.CompareNode_swigregister
CompareNode_swigregister(CompareNode)


def single_source_shortest_path(*args):
  return _RCSP.single_source_shortest_path(*args)
single_source_shortest_path = _RCSP.single_source_shortest_path

def path_to(*args):
  return _RCSP.path_to(*args)
path_to = _RCSP.path_to

def shortest_path_between_rois(*args):
  return _RCSP.shortest_path_between_rois(*args)
shortest_path_between_rois = _RCSP.shortest_path_between_rois
# This file is compatible with both classic and new-style classes.


